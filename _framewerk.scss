/*
  FLEX BOX
  Flex Container - all flex items should be wrapped with .flex-container
*/
.flex-container{
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-flow: row wrap;
	justify-content: flex-start;
  align-content: flex-start;
}
.flex-item { /* DEPRECIATED - Never used, should be handled by a custom class */
	align-self: flex-start;
}
.flex-image {
  width: 100%;
  height: auto;
}
.flex-half{ /* DEPRECIATED - replaced with breakpoint specific */
  width: 0.5%;
  min-height: 1px;
}
.flex-iframe{
  width: 100%;
  iframe{
    width: 100%;
  }
}
.flex-vertical-top {
  align-items: flex-start;
}
.flex-vertical-center {
  align-items: center;
}
.flex-vertical-bottom {
  align-items: flex-end;
}
.flex-vertical-stretch {
  align-items: stretch;
}
.flex-horizontal-left {
  justify-content: flex-start;
}
.flex-horizontal-center {
  justify-content: center;
}
.flex-horizontal-right {
  justify-content: flex-end;
}

/*
  SPACING
  $spacing variable is defined in _framewerk_variables.scss
*/
.space{
  padding: $spacing;
  &.double{
    padding: $spacing * 2;
  }
  &.triple{
    padding: $spacing * 3;
  }
  &.one-forth{
    padding: $spacing * 0.25;
  }
  &.half{
    padding: $spacing / 2;
  }
  &.three-forths{
    padding: $spacing * 0.75;
  }
	&.noleft{
		padding-left: 0;
	}
	&.noright{
		padding-right: 0;
	}
	&.halfleft{
		padding-left: $spacing / 2;
	}
	&.halfright{
		padding-right: $spacing / 2;
	}
	&.notop{
		padding-top: 0;
	}
	&.nobottom{
		padding-bottom: 0;
	}
	&.halftop{
		padding-top: $spacing / 2;
	}
	&.halfbottom{
		padding-bottom: $spacing / 2;
	}
}
/*
  DEFAULT DESKTOP
  If no breakpoints are defined, these will be the fallback width percentages
*/
.desktop-half{
  width: 0.5%;
  min-height: 1px;
}
@for $i from 1 through 100 {
  .desktop-#{$i} {
    width : round(percentage($i/100));
  }
}
.desktop-hide{
  display: none;
}
.desktop-auto{
  width: auto;
}
.desktop-show{
  display: inherit;
}
.flex-container{
  &.desktop-ltr{
    flex-direction: row;
  }
  &.desktop-rtl{
    flex-direction: row-reverse;
  }
  &.desktop-ttb{
    flex-direction: column;
  }
  &.desktop-btt{
    flex-direction: column-reverse;
  }
}
/*
  DESKTOP BREAKPOINTS
  Loop through each desktop defined breakpoint
*/
@each $label, $breakpoint in $fw-desktop-breakpoints{
  @media screen and (min-width: $breakpoint) {
    .#{$label}-half{
      width: 0.5%;
      min-height: 1px;
    }
    @for $i from 1 through 100 {
      .#{$label}-#{$i} {
        width : round(percentage($i/100));
      }
    }
    .#{$label}-auto{
      width: auto;
    }
    .#{$label}-hide{
      display: none;
    }
    .#{$label}-show{
      display: inherit;
    }
    /* Flex Container Direction */
    .flex-container{
      &.#{$label}-ltr{
        flex-direction: row;
      }
      &.#{$label}-rtl{
        flex-direction: row-reverse;
      }
      &.#{$label}-ttb{
        flex-direction: column;
      }
      &.#{$label}-btt{
        flex-direction: column-reverse;
      }
    }
  }
}
